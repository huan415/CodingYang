# Mysql锁

## 锁的分类

读锁（共享锁）： 只能读、不能写

写锁（排它锁）： 不能读、不能写



|  锁  |           优点           |                        缺点                        |
| :--: | :----------------------: | :------------------------------------------------: |
| 表锁 | 开销小、加锁快、不会死锁 |                  细粒度大、并发低                  |
| 行锁 |     细粒度小、并发高     | 开销大（先定位到哪一行）、<br />加锁慢、会发生死锁 |



InnoDB 和 MYISAM 最大的不同点：

​       InnoDB支持事务和行级锁



## ACID

原子性（Atomicity）:  一个原子操作，要么全部成功、要么全部失败

一致性（Consistent）:  事务前后都必须保持一致

隔离性（Isolation）:  保证事务不受其他事务并发操作的影响，即：处理过程的中间状态对外部不可见。

持久性（Durable）:  事务完成之后是永久性的（持久化）



## 并发事务带来的问题

1. 更新丢失： 多个事务对同一个数据进行修改，互相覆盖。即：后面的更新操作覆盖前面的更新操作
2. 脏读： 读到其他事务已修改但未提交的数据（但其他事务回滚时，不符合一致性要求）
3. 不可重复读：  读到其他事务已提交修改的数据（不符合隔离性）
4. 幻读：读到其他事务已提交新增的数据（不符合隔离性）



## 事务的隔离级别

show variables like 'tx_isolation';

set tx_isolation = 'Repeatable-read';

|              隔离级别              | 脏读<br />（Dirty Read） | 不可重复读<br />(NonRepeatable Read) | 幻读<br />(Phantom Read) |
| :--------------------------------: | :----------------------: | :----------------------------------: | :----------------------: |
| 读未提交<br />（Read uncommitted） |           可能           |                 可能                 |           可能           |
|  读已提交<br />（Read committed）  |          不可能          |                 可能                 |           可能           |
| 可重复读<br />（Repeatable read）  |          不可能          |                不可能                |           可能           |
|   可串行化<br />（Serializable）   |          不可能          |                不可能                |          不可能          |



## 日志

### redo log

update `yangyc`.`huan415_explain` set f1='b' where f1='a',修改数据过程：

```mermaid
graph LR
A(磁盘空间)-->B("数据页缓冲区：data buffer page,将f2=a")
B--从磁盘读取数据-->C("redo缓冲区：redo buffer page,记录f1从a变成b的过程")
C--commit或时间太长-->D("redo log: 日志文件 ib_logfile0")
D--重启数据库 或者redo log太大-->A
```

（1）.  既然修改的数据没有更新进磁盘，那么怎么读取已修改后的数据？

1.  读取磁盘。2. 读取redo log数据的变化过程。整合两个结果返回


   （2） 用redo怎么提高效率

   假设：数据过程：磁盘-->缓存区修改-->磁盘，这里磁盘到缓冲区将涉及到两次的数据交换

   ​           而改成redo log时，只记录数据变化过程，这样通信的数据少很多

   

   