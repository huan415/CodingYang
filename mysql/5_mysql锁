# Mysql锁

## 锁的分类

读锁（共享锁）：其他事务只能读、不能写

写锁（排它锁）： 其他事务不能读、不能写



```mermaid
graph LR
A(锁)-->B1("锁细粒度")
B1-->B11("表级锁(MYISAM)")
B1-->B12("行级锁(MYISAM)")
B1-->B13("叶级锁(BDB)")
A-->B2("加锁机制")
B2-->B21("乐观锁")
B2-->B22("悲观锁")
A-->B3("锁模式")
B3-->B31("gap锁")
B3-->B32("记录锁")
B3-->B33("next-key锁")
B3-->B34("意向锁")
B3-->B35("插入意向锁")
```





|            锁             | 原理                                                | 目的     |           优点           |                        缺点                        |
| :-----------------------: | --------------------------------------------------- | -------- | :----------------------: | :------------------------------------------------: |
|           表锁            |                                                     |          | 开销小、加锁快、不会死锁 |                  细粒度大、并发低                  |
|           行锁            |                                                     |          |     细粒度小、并发高     | 开销大（先定位到哪一行）、<br />加锁慢、会发生死锁 |
|           叶锁            |                                                     |          |                          |                                                    |
|          乐观锁           | CAS                                                 |          |                          |                                                    |
|          悲观锁           |                                                     |          |                          |                                                    |
|           gap锁           | 索引前后的间隙加锁，不对索引本身加锁                | 解决幻读 |                          |                                                    |
| 行锁<br />（Record Lock） | 某条行记录上锁，锁的是记录上的索引，不锁记录本身    |          |                          |                                                    |
|  后码锁（Next-Key Lock）  | 行锁和gap锁结合，先进行行锁，再对记录两边加上间隙锁 | 解决幻读 |                          |                                                    |
|          意向锁           | 事务有意向对某些行加**排他锁**（X锁）               |          |                          |                                                    |
|        插入意向锁         |                                                     |          |                          |                                                    |



InnoDB 和 MYISAM 最大的不同点：

​       InnoDB支持事务和行级锁



加锁原则：

​    例如执行：UPDARW `yangyc`.`huan415_explain` f2='1'  WHERE f1='a'; 

1. 如果f1没有索引，进行全表扫描，则会上升为表锁
2. f1为普通索引（部署唯一索引或主键索引），则使用Next-Key Lock



## ACID

原子性（Atomicity）:  一个原子操作，要么全部成功、要么全部失败

一致性（Consistent）:  事务前后都必须保持一致，完整性不被破坏

隔离性（Isolation）:  保证事务不受其他事务并发操作的影响，即：处理过程的中间状态对外部不可见。

持久性（Durable）:  事务完成之后是永久性的（持久化）



## 并发事务带来的问题

1. 更新丢失： 多个事务对同一个数据进行修改，互相覆盖。即：后面的更新操作覆盖前面的更新操作
2. 脏读： 读到其他事务已修改但未提交的数据（但其他事务回滚时，不符合一致性要求）
3. 不可重复读：  读到其他事务已提交修改的数据（不符合隔离性）
4. 幻读：读到其他事务已提交新增的数据（不符合隔离性）



## 事务的隔离级别

show variables like 'tx_isolation';

set tx_isolation = 'Repeatable-read';

|              隔离级别              | 脏读<br />（Dirty Read） | 不可重复读<br />(NonRepeatable Read) | 幻读<br />(Phantom Read) |
| :--------------------------------: | :----------------------: | :----------------------------------: | :----------------------: |
| 读未提交<br />（Read uncommitted） |           可能           |                 可能                 |           可能           |
|  读已提交<br />（Read committed）  |          不可能          |                 可能                 |           可能           |
| 可重复读<br />（Repeatable read）  |          不可能          |                不可能                |           可能           |
|   可串行化<br />（Serializable）   |          不可能          |                不可能                |          不可能          |



## 日志

### redo log

update `yangyc`.`huan415_explain` set f1='b' where f1='a',修改数据过程：

```mermaid
graph LR
A(磁盘空间)-->B("数据页缓冲区：data buffer page,将f2=a")
B--从磁盘读取数据-->C("redo缓冲区：redo buffer page,记录f1从a变成b的过程")
C--commit或时间太长-->D("redo log: 日志文件 ib_logfile0")
D--重启数据库 或者redo log太大-->A
```

```mermaid
graph TB
A(开始事务)--执行sql-->B("update `yangyc`.`huan415_explain` set f1=`b` where f1=`a`");
B-->C{"判断数据也是否在缓存中"}
C--是-->D1("返回数据页到数据行缓冲区 data buffer page")
C--否-->D2("从磁盘中读入内存")
D2-->D1
D1-->E("修改前将数据写入undo log")
E-->F("内存中修改数据")
F-->G("修改后数据写入redo缓冲区：redo buffer page 记录的是修改过程")
G==>H("ff")
G-->I("33")
```

```flow
st=>start: 开始事务
op=>operation: update `yangyc`.`huan415_explain` set f1=`b` where f1=`a`
cond=>condition: 判断数据也是否在缓存中
sub1=>subroutine: 从磁盘中读入内存
io=>inputoutput: 返回数据页到数据行缓冲区 data buffer page
undolog=>operation: 修改前将数据写入undo log
updateData=>operation: 内存中修改数据
redoLogBuffer=>condition: 修改后数据写入redo缓冲区：redo buffer page 记录的是修改过程
redoLogFile=>subroutine: innodb_flush_log_at_trx_commit控制如何写入redo log file,详见下图：
persistentRedoLog=>subroutine: 持久化binlog到磁盘
commit=>subroutine: 提交事务
binlogBuffer=>subroutine:  记录binlog到缓冲区
persistentBinLog=>subroutine: 持久化binlog到磁盘
e=>end: 结束框
st(bottom)->op(bottom)->cond
cond(yes)->sub1(right)->io
cond(no)->io(bottom)->undolog(bottom)->updateData->redoLogBuffer
redoLogBuffer(no)->redoLogFile->persistentRedoLog
redoLogBuffer(yes)->commit-->binlogBuffer->persistentBinLog

```



（1）.  既然修改的数据没有更新进磁盘，那么怎么读取已修改后的数据？

1.  读取磁盘。2. 读取redo log数据的变化过程。整合两个结果返回


   （2） 用redo怎么提高效率

   假设：数据过程：磁盘-->缓存区修改-->磁盘，这里磁盘到缓冲区将涉及到两次的数据交换

   ​           而改成redo log时，只记录数据变化过程，这样通信的数据少很多

   

   